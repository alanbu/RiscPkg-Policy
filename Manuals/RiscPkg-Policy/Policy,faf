<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>RISC OS Packaging Project: Policy Manual</title>
</head>
<body>
<h1 align="center">RISC OS Packaging Project<br>
Policy Manual<br>
Version 0.5.0.0 (11 March 2016)</h1>
</tr>
<tr>
<h2><a name="TOC-Introduction"></a>Introduction</h2>
<p>This is the Policy Manual for the RISC OS Packaging Project.  It
defines the standards which packages are normally expected to meet if they
are to be accepted as part of the project.  These include:</p>
<ul>
<li>the technical requirements of the package manager;</li>
<li>measures to prevent packages from interfering with each other;</li>
<li>documentation standards; and</li>
<li>legal requirements.</li>
</ul>
<p>Rules can be broken where there is good reason to do so, however a
consensus must be reached beforehand if other parts of the project are
affected.</p>
<p>These rules do not apply to packages distributed independently of the
project.</p>
<h2><a name="TOC-Aims"></a>Aims</h2>
<p>The aims of the project are:</p>
<ol>
<li>to build and distribute a collection of RISC OS software packages;
</li>
<li>to provide a convienient mechanism for users to install, update
and remove packages on their computers;</li>
<li>to promote consistency and peaceful co-existence among packages in the
collection by setting policies to regulate their content and behaviour;</li>
<li>to provide a systematic mechanism for recording, characterising
and fixing bugs in the package collection;</li>
<li>to ensure that the legal status of all software in the package collection
is understood and respected;</li>
<li>to promote the development of free and open source software for
RISC OS.</li>
</ol>
<h2><a name="TOC-Notation"></a>Notation</h2>
<p>Extended Backus-Naur Form (EBNF) is used to specify the syntax of data
structures.  A formal description may be found in ISO/IEC 14977.  Briefly:</p>
<ul>
<li>a comma (<code>','</code>) indicates concatenation;</li>
<li>a pipe (<code>'|'</code>) indicates a choice of alternatives;</li>
<li>an asterisk (<code>'*'</code>) indicates an item repeated a specific
number of times;</li>
<li>square brackets (<code>'['</code> and <code>']'</code>) enclose an
optional sequence.</li>
<li>braces (<code>'{'</code> and <code>'}'</code>) enclose a sequence
repeated zero or more times.</li>
<li>parentheses (<code>'('</code> and <code>')'</code>) group items together.
</li>
<li>a semicolon (<code>';'</code>) indicates the end of a production.</li>
</ul>
<p>The meta-identifer <code>ws</code> indicates whitespace:</p>
<pre>ws = ws-character, {ws-character};

ws-character = space-character | newline-character;

</pre>
<h2><a name="TOC-Package-Format"></a>Package Format</h2>
<h3><a name="TOC-Binary-Package-Format"></a>Binary Package Format</h3>
<p>A binary package consists of a zip file containing some or all of
the following files and directories:</p>
<table border="1">
<tbody><tr>
<td><code>RiscPkg</code></td>
<td>Required</td>
<td>A directory which contains information about the package.</td>
</tr>
<tr>
<td><code>RiscPkg.Control</code></td>
<td>Required</td>
<td>The package control file, containing information about the package
and its relationship to other packages.</td>
</tr>
<tr>
<td><code>RiscPkg.Copyright</code></td>
<td>Required</td>
<td>A text file which states where the package was obtained from, who
owns the copyright, and how it is licenced.</td>
</tr>
<tr>
<td><code>RiscPkg.CrossPaths</code></td>
<td>Optional</td>
<td>A file containing a list of translation rules which identify files
to be made available to the cross compiler and specify where they are
to be installed.</td>
</tr>
<tr>
<td><code>RiscPkg.Triggers</code></td>
<td>Optional</td>
<td>A directory containing files to be run during the install, remove
or upgrade of a package.</td>
<td><code>Apps</code></td>
<td>Optional</td>
<td>The root of the hierarchy within which applications are stored.
A package in a given section normally uses a subdirectory of
<code>Apps</code> named after that section.</td>
</tr>
<tr>
<td><code>Manuals</code></td>
<td>Optional</td>
<td>The root of the heirarchy within which manuals and other documentation
are stored when no other location (such as an application directory) is
more appropriate.</td>
</tr>
<tr>
<td><code>Resources</code></td>
<td>Optional</td>
<td>A directory which corresponds to the active <code>Resources</code>
directory.</td>
</tr>
<tr>
<td><code>Sprites</code></td>
<td>Optional</td>
<td>A directory which contains sprite declarations. This has been deprecated from version 0.4.0.</td>
</tr>
<tr>
<td><code>SysVars</code></td>
<td>Optional</td>
<td>A directory which contains system variable definitions. This has been deprecated from version 0.4.0.</td>
</tr>
<tr>
<td><code>System</code></td>
<td>Optional</td>
<td>A directory which corresponds to the active <code>!System</code>
directory.</td>
</tr>
<tr>
<td><code>ToBeLoaded</code></td>
<td>Optional</td>
<td>A directory which corresponds to a location on the <code>Boot$ToBeLoaded</code> path
(or <code>Boot$Default$ToBeLoaded</code> path on RISC OS 6).</td>
</tr>
<tr>
<td><code>ToBeTasks</code></td>
<td>Optional</td>
<td>A directory which corresponds to a location on the <code>Boot$ToBeTasks</code> path
(or <code>Boot$Default$ToBeTasks</code> path on RISC OS 6)</td>
</tr>
<tr>
<td><code>Boot</code></td>
<td>Optional</td>
<td>A directory which corresponds to the <code>!Boot</code> directory.
It is recommended that this directory is used for OS updates only.</td>
</tr>
<tr><td><code>Bootloader</code></td>
<td>Optional</td>
<td>A directory which corresponds to the SD card system image for the
Raspberry Pi (<code>!Boot.Loader</code>). This is for system updates
provided by RISC OS Open only.</td>
</tr><tr>
<td><code>Diversions</code></td>
<td>Optional</td>
<td>A directory that corresponds to the <code>Diversons</code> directory.
This is used for Diversions installed with the RISC OS HardDisc image.
<code>Apps.Games</code> should be used in preference where possible.</td>
</tr><tr>
<td><code>Documents</code></td>
<td>Optional</td>
<td>A directory that corresponds to the <code>Documents</code> directory.
This has been added for documents installed with the RISC OS HardDisc image.
It is suggested that this is used for non-technical documentation and examples
files and <code>Manuals</code> is used for more technical documentation.
</td>
</tr><tr>
<td><code>Printing</code></td>
<td>Optional</td>
<td>A directory which corresponds to the <code>Printing</code> directory.
This is usually used for installation of components for the RISC OS
printing system.</td>
</tr>
<tr>
<td><code>Utilities</code></td>
<td>Optional</td>
<td>A directory which corresponds to the <code>Utilities</code> directory.
This is used for utilities installed with the RISC OS HardDisc image.
<code>Apps.Utilities</code> should be used in preference where possible.</td>
</tr>
<tr>
<td><code>!Boot</code></td>
<td>Optional</td>
<td>An alias for the <code>Boot</code> path above.</td>
</tr>
<tr>
<td><code>!System</code></td>
<td>Optional</td>
<td>An alias for the <code>System</code> path above.</td>
</tr>
</tbody></table>
<p>Each file has an associated logical path (its location within the package
file) and a physical path (its location when installed).  Only the
logical path is specified within the package file.  The package manager
(on behalf of the user) is responsible for translating logical paths into
physical paths, and it has considerable freedom as to how it does this.
The only rule is that the translation must be reasonable.  For example:
</p><ul>
<li>it is reasonable for the user to place modules in any directory of
his choosing, provided they can then be accessed through the
<code>System$Path</code>.</li>
<li>it is unreasonable for a <code>!Run</code> file to be separated from
the application directory to which it belongs.</li>
</ul>
<p>Packages are expected to cope with reasonable translations, and should
not make unnecessary assumptions about where their files have been placed.
</p>
<p>(For simple desktop applications, the usual practice of defining a system
variable of the form <code>App$Dir</code> then accessing files with respect
to that variable is sufficient to meet this requirement.)</p>
<h3><a name="TOC-Source-Package-Format"></a>Source Package Format</h3>
<p>A source package consists of a zip file which includes the following
files:</p>
<table border="1">
<tbody><tr>
<td><code>RiscPkg</code></td>
<td>Required</td>
<td>A directory which contains information about the package.</td>
</tr>
<tr>
<td><code>RiscPkg.Control</code></td>
<td>Required</td>
<td>The package control file, containing basic information about the
package and its relationship to other packages.</td>
</tr>
<tr>
<td><code>RiscPkg.Copyright</code></td>
<td>Required</td>
<td>A text file which details where the package was obtained from, who
owns the copyright, and how it is licenced.</td>
</tr>
<tr>
<td><code>RiscPkg.Rules</code></td>
<td>Required</td>
<td>The top-level makefile for building the binary package(s).</td>
</tr>
</tbody></table>
<p>Although the <code>RiscPkg.Rules</code> file is stated to be required,
it is currently permissible to omit this file if the source package exists
only to comply with licensing requirements and is not intended to be
automatically buildable.  However inclusion of a <code>Rules</code> file
is recommended, even if its only purpose is to take a set of pre-compiled
binaries and place them in a package file.</p>
<h3><a name="TOC-Control-records"></a>Control records</h3>
<h4><a name="TOC-Introduction1"></a>Introduction</h4>
<p>A control record is a structure used to record information about a
package for use by the package manager.  There are two types of control
record (source and binary) and two types of file in which they can appear
(package control files and package index files):</p>
<table border="1">
<tbody><tr>
<th>File</th>
<th>Content</th>
</tr>
<tr>
<td>Binary control file</td>
<td>One binary control record</td>
</tr>
<tr>
<td>Source control file</td>
<td>One source control record; one binary control record for each
resulting binary package</td>
</tr>
<tr>
<td>Binary index file</td>
<td>One binary control record for each binary package</td>
</tr>
<tr>
<td>Source index file</td>
<td>One source control record for each source package</td>
</tr>
</tbody></table>
<p>Package index files list all of the packages that make up a particular
distribution, and are the only information available to the package manager
(or the user) when deciding which packages to download.  Package control
files are located within the packages to which they refer, so are only
available once those packages have been downloaded.  Unlike index file
records they are guaranteed to exist whether or not the package is part of
a distribution and whether or not it has been superceded by a new version.
</p>
<p>Each control record consists of a sequence of control fields:</p>
<pre>control-record = control-field, {control-field};
</pre>
<p>and each field consists of a name and a value, optionally followed by
a number of continuation lines:</p>
<pre>control-field = control-field-name, ':', space-character,
  control-field-value, newline, {continuation-line};
</pre>
<p>For example:</p>
<pre>Package: RiscPkg
Priority: Required
Section: Admin
Version: 0.2.0
</pre>
<p>The fields that are allowed or required in a given control record depend
on whether it is a source or binary control record, and whether it is
located in a control file or an index file:</p>
<table border="1">
<tbody><tr>
<th>Name</th>
<th>Source</th>
<th>Binary</th>
<th>Index only</th>
<th>Description</th>
</tr>
<tr>
<td>Source</td>
<td>Required</td>
<td>Optional</td>
<td>No</td>
<td>The name of the source package</td>
</tr>
<tr>
<td>Package</td>
<td>&mdash;</td>
<td>Required</td>
<td>No</td>
<td>The name of the binary package</td>
</tr>
<tr>
<td>Section</td>
<td>Required</td>
<td>Required</td>
<td>No</td>
<td>A label for classifying packages by purpose</td>
</tr>
<tr>
<td>Priority</td>
<td>Required</td>
<td>Required</td>
<td>No</td>
<td>A label for classifying packages by importance</td>
</tr>
<tr>
<td>Licence</td>
<td>Required</td>
<td>Required</td>
<td>No</td>
<td>The type of licence carried by the package</td>
</tr>
<tr>
<td>Maintainer</td>
<td>Required</td>
<td>Required</td>
<td>No</td>
<td>The name and e-mail address of the maintainer</td>
</tr>
<tr>
<td>Autobuild</td>
<td>Optional</td>
<td>&mdash;</td>
<td>No</td>
<td>The platform or platforms on which this package can be built
automatically</td>
</tr>
<tr>
<td>Standards-Version</td>
<td>Required</td>
<td>Required</td>
<td>No</td>
<td>The version of this policy manual to which the package conforms</td>
</tr>
<tr>
<td>Version</td>
<td>Required</td>
<td>Required</td>
<td>No</td>
<td>The version number</td>
</tr>
<tr>
<td>Size</td>
<td>Optional</td>
<td>Optional</td>
<td>Yes</td>
<td>The size of the package file</td>
</tr>
<tr>
<td>MD5Sum</td>
<td>Optional</td>
<td>Optional</td>
<td>Yes</td>
<td>The MD5sum of the package file</td>
</tr>
<tr>
<td>URL</td>
<td>Optional</td>
<td>Optional</td>
<td>Yes</td>
<td>A URL from which the package may be downloaded</td>
</tr>
<tr>
<td>Build-Depends</td>
<td>Optional</td>
<td>&mdash;</td>
<td>No</td>
<td>Packages which must be present for this one to be built</td>
</tr>
<tr>
<td>Depends</td>
<td>&mdash;</td>
<td>Optional</td>
<td>No</td>
<td>Packages which must be present for this one to be installed</td>
</tr>
<tr>
<td>Recommends</td>
<td>&mdash;</td>
<td>Optional</td>
<td>No</td>
<td>Packages which would normally be wanted when this one is installed</td>
</tr>
<tr>
<td>Suggests</td>
<td>&mdash;</td>
<td>Optional</td>
<td>No</td>
<td>Packages which might be wanted because this one is installed</td>
</tr>
<tr>
<td>Description</td>
<td>Required</td>
<td>Required</td>
<td>No</td>
<td>A brief description and a long description of this package</td>
</tr>
<tr>
<td>Components</td>
<td>&mdash;</td>
<td>Optional</td>
<td>No</td>
<td>A list of logical paths to components that may want to be moved
or added to the boot options</td>
</tr></tbody></table>
<p>Field names are not case-sensitive, however they should normally be
capitalised as in the table above.  They must begin at the start of a line
and be followed by a colon and a space.</p>
<p>The end of a control record is indicated either by a blank line or by
the end of the file.</p>
<p>Values which span several lines are written using continuation lines.
These begin with a space (which is automatically removed by the parser).
If a blank line is required as part of the value, it is written as a
space followed by a period (also removed by the parser):</p>
<pre>continuation-line = space, (control-field-value | '.'), newline;
</pre>
<blockquote><p>(The space serves to distinguish a continuation line from
the start of a new field.  The dot serves to distinguish an otherwise empty
continuation line from the end of the control record.)</p></blockquote>
<p>For example:</p>
<pre>Package: RiscPkg
Priority: Required
Section: Admin
Version: 0.2.0
Description: A package manager for RISC OS
 The three main functions of RiscPkg are:
 - to download and install new software packages on request;
 - to update installed software packages when new versions are release; and
 - to remove software packages when they are no longer needed.
 .
 If one package requires another in order to run, a request to install the
 first will also install the second.  If a package has been installed
 automatically but is no longer needed, it is removed.

</pre>
<h4><a name="TOC-The-Section-field"></a>The 'Section' field</h4>
<p>This indicates the purpose of the package.  It contains one of the
following section names:</p>
<table border="1">
<tbody><tr>
<th>Section</th>
<th>Content</th>
</tr>
<tr>
<td>Administration</td>
<td>System administration tools</td>
</tr>
<tr>
<td>Archive</td>
<td>Programs for archiving or compressing data</td>
</tr>
<tr>
<td>Audio</td>
<td>Programs which operate on sound recordings or music scores</td>
</tr>
<tr>
<td>Chat</td>
<td>Programs for chat or instant messaging (including protocols such as
IRC and ICQ)</td>
</tr>
<tr>
<td>Communication</td>
<td>Communication programs (excluding those which relate to networks)</td>
</tr>
<tr>
<td>Database</td>
<td>Databases (both general-purpose and application-specific)</td>
</tr>
<tr>
<td>Demo</td>
<td>Demonstration programs</td>
</tr>
<tr>
<td>Desktop</td>
<td>Programs which relate to the mechanics of the desktop</td>
</tr>
<tr>
<td>Development</td>
<td>Software development tools (including compilers and interpreters but
excluding libraries)</td>
</tr>
<tr>
<td>Device</td>
<td>Device drivers and control software</td>
</tr>
<tr>
<td>Disc</td>
<td>Programs which operate on discs or filing systems</td>
</tr>
<tr>
<td>Document</td>
<td>Programs for creating, editing and processing documents (including
wordprocessors and desktop publishing programs)</td>
</tr>
<tr>
<td>File</td>
<td>Programs which operate on individual files or groups of files</td>
</tr>
<tr>
<td>Education</td>
<td>Educational programs</td>
</tr>
<tr>
<td>Emulation</td>
<td>Emulators for other machines or operating systems</td>
</tr>
<tr>
<td>Font</td>
<td>Fonts and programs which operate on fonts</td>
</tr>
<tr>
<td>Games</td>
<td>Computer games</td>
</tr>
<tr>
<td>Graphics</td>
<td>Programs which operate on still images (vector or bitmap)</td>
</tr>
<tr>
<td>Library</td>
<td>Libraries (for any programming language)</td>
</tr>
<tr>
<td>Mail</td>
<td>Programs which process electronic mail or news messages</td>
</tr>
<tr>
<td>Mathematics</td>
<td>Mathematical programs (excluding educational ones)</td>
</tr>
<tr>
<td>Miscellaneous</td>
<td>Packages which do not readily fit into any other section</td>
</tr>
<tr>
<td>Network</td>
<td>Programs for managing or using computer networks (including both
Internet and non-Internet protocols)</td>
</tr><tr>
<td>Presentation</td>
<td>Programs for editing and viewing presentations</td>
</tr>
<tr>
<td>Printing</td>
<td>Packages which are part of or relate to the printing system</td>
</tr>
<tr>
<td>Spreadsheet</td>
<td>Programs which operate on spreadsheets</td>
</tr>
<tr>
<td>System</td>
<td>Packages which are part of or relate to the core operating system</td>
</tr>
<tr>
<td>Text</td>
<td>Programs which operate on text files (including plain text
and generic structured formats such as CSV and XML)</td>
</tr>
<tr>
<td>Video</td>
<td>Programs which operate on moving images (vector or bitmap, with
or without sound)</td>
</tr>
<tr>
<td>Web</td>
<td>Programs which operate on HTML and related data types (including
XHTML but excluding generic XML)</td>
</tr>
</tbody></table>
<p>Where reference is made to programs this should be taken to include
files of any type which would be used in conjunction with such programs.
A more specific section (such as Mail) should normally take precedence
over a less specific one (such as Communication).</p>
<p>It is likely that additional sections will be defined in the future.
The 'Misc' section is available for packages which would
otherwise be difficult to classify.  A package may move from one section
to another whenever its version number changes.</p>
<h4><a name="TOC-The-Priority-field"></a>The 'Priority' field</h4>
<p>This indicates how likely it is that a typical user will want the
package if they have not explicitly asked for it.  It contains one of
the following priority levels:</p>
<table border="1">
<tbody><tr>
<th>Priority</th>
<th>Meaning</th>
</tr>
<tr>
<td>Required</td>
<td>Packages which are needed for the system (including the package
manager) to function correctly.  (Example: RiscPkg.)</td>
</tr>
<tr>
<td>Important</td>
<td>Packages which a user could reasonably expect to be present on
any RISC OS system.  (Example: SysLog.)</td>
</tr>
<tr>
<td>Standard</td>
<td>Default packages for a typical user.  These should provide a reasonably
small but not too limited RISC OS system.  Users will normally need to
add to this selection to meet their specific requirements, but should find
that many of the smaller and more generic applications they want are already
present.  (Example: Nettle.)</td>
</tr>
<tr>
<td>Optional</td>
<td>Default packages for a user who wants to install almost everything,
without regard for disc space or installation time.  (Example: GCC.)</td>
</tr>
<tr>
<td>Extra</td>
<td>Packages which have a very narrow audience, or which conflict with
other packages of higher priority.  (Example: LibPkg.)</td>
</tr>
</tbody></table>
<p>Packages are assumed to be optional unless there is a specific reason
why they should have a higher or lower priority.  A consensus should be
reached before choosing a priority higher than optional unless there are
clear technical reasons why that priority is necessary or appropriate.</p>
<p>A package declared as a dependency must be of equal or higher priority
to the package declaring the dependency.</p>
<h4><a name="TOC-The-Licence-field"></a>The 'Licence' field</h4>
<p>This provides information about how the package is licenced.
It consists of a comma-separated list of licence tags.</p>
<pre>licence = licence-tag, {',', licence-tag};

</pre>
<table border="1">
<tbody><tr>
<th>Tag</th>
<th>Definition</th>
</tr>
<tr>
<td>Free</td>
<td>Packages that meet the
<a href="http://www.opensource.org/docs/definition.php" rel="nofollow">
Open Source Definition</a>, as defined by the
<a href="http://www.opensource.org/" rel="nofollow">Open Source Institute</a></td>
</tr>
<tr>
<td>Non-free</td>
<td>Packages that do not meet the Open Source Definition</td>
</tr>
</tbody></table>
<p>Additional licence tags may be defined in the future.  Unrecognised
tags should be ignored.  The tag list must be complete with respect to
the declared standards-version; however, the fact that a tag is absent
should not be taken to imply that the converse is true.</p>
<p>If a package has several components with different licences, the most
restrictive combination of terms is applicable.  If a package offers a
choice of licence, the least restrictive option applies.  If there is
significant doubt as to which tags apply, the more restrictive interpretation
of the licence must be followed.</p>
<p>Since only two tags are available at present and they are exact
opposites, it follows that packages working to this version of policy
must specify exactly one licence tag.</p>
<h4><a name="TOC-The-Maintainer-field"></a>The 'Maintainer' field</h4>
<p>This identifies the package maintainer responsible for the package
at the time it was issued.</p>
<pre>maintainer = real-name, '&lt;', email-address, '&gt;';

</pre>
<h4><a name="TOC-The-Autobuild-field"></a>The 'Autobuild' field</h4>
<p>This is a comma-separated list of platforms which are, or should be,
able to autobuild this package:</p>
<pre>autobuild-list = autobuilt-platform, { [ws], ',', [ws], autobuild-platform };

autobuild-platform = 'RISCOS' | 'POSIX';
</pre>
<p>The characteristics of these platforms are described below as part
of the build environment.</p>
<p>The list of platforms is nominally considered to be in order of
preference, however this order may and probably will be overridden by
the autobuilder software to take account of efficiency and availability.
If there is a clear technical reason (other than speed of compilation)
why the package should be built on one platform rather than another
then you should omit the platforms you wish to avoid.</p>
<p>If the autobuild field is omitted then this currently indicates that
the package is not suitable for autobuilding on any platform.</p>
<h4><a name="TOC-The-Standards-Version-field"></a>The 'Standards-Version' field</h4>
<p>This identifies the most recent version of the policy manual to
which the package is thought to comply.  There are four numeric
components to this version, representing (from left to right):</p>
<ol>
<li>changes to the package format which make packages incomprehensible
to existing tools;</li>
<li>changes to the package format which make packages incompatible with
previous versions of the package manager;</li>
<li>substantive changes to policy which do not affect compatibility
between packages and the package manager.</li>
<li>non-substantive changes to policy.</li>
</ol>
<p>Because the fourth component does not indicate substantive change,
it is sufficient to specify the first three components in the
standards-version field.</p>
<p>For example, if the latest version of the policy manual is
'0.1.2.3' and a package complies with that version, the
standards-version field of the package should be set to
'0.1.2'.</p>
<p>Intentional non-compliance may be disregarded provided it does not
affect how the package manager should process the package.</p>
<h4><a name="TOC-The-Version-field"></a>The 'Version' field</h4>
<p>This contains the package version.  It must increase (with respect
to the sort order defined below) whenever the content of a package is
upgraded, otherwise that upgrade will not be offered to the user.</p>
<p>Versions are discussed in detail in a separate section below.</p>
<h4><a name="TOC-The-Size-field"></a>The 'Size' field</h4>
<p>This contains the size of the package file, expressed as a decimal
number of bytes.</p>
<pre>size = digit, {digit};

</pre>
<h4><a name="TOC-The-MD5Sum-field"></a>The 'MD5Sum' field</h4>
<p>This contains the MD5 message digest of the package file, expressed
as a hexadecimal number.</p>
<pre>md5sum = 32 * hex-digit;

</pre>
<h4><a name="TOC-The-URL-field"></a>The 'URL' field</h4>
<p>This contains an absolute or relative URL from which this package can
downloaded.  If the URL is relative then it is resolved with respect to
the package index file in which it was specified.</p>
<h4><a name="TOC-The-Depends-field"></a>The 'Depends' field</h4>
<p>This contains a comma-separated list of other packages which must be
installed for this one to function:</p>
<pre>depends-list = [ dependency, { [ws], ',', [ws], dependency } ];
</pre>
<p>Each dependency consists of a package name followed by an optional
version predicate:</p>
<pre>dependency = package-name, [ws, version-predicate];
</pre>
<p>The version predicate, if present, specifies which versions of the
package are capable of specifying the dependency:</p>
<pre>version-predicate = '(', [ws], version-relation, [ws], version, [ws], ')';

version-relation = '=' | '&lt;&lt;' | '&gt;&gt;' | '&lt;=' | '&gt;=';
</pre>
<p>For example:</p>
<pre>Depends: LibPkg, RTK (&gt;=0.5.0), ZLib
</pre>
<p>would cause installation of any version of LibPkg, version 0.5.0 or
later of the RTK, and any version of ZLib.</p>
<p>Note the double '&amp;lt' or '&gt;' for strictly
less-than or greater-than (which are required for historical reasons).</p>
<p>Small reductions in functionality are not significant: the dependency
must be strong enough that the package is of little use without it.
For example:</p>
<ul>
<li>If an application will not run without a module then it is
dependent on that module.</li>
<li>If an application has been split into several packages then
there will usually be a core package on which the optional packages
depend.</li>
</ul>
<p>However:</p>
<ul>
<li>The fact that a package contains HTML documentation, or has a button
for visiting its upstream website, does not make it dependent on
WWW-Browser.</li>
<li>The fact that a graphics application can handle a particular filetype
when a certain module is present does not make it dependent on that module
if it can process other filetypes without it.</li>
</ul>
<h4><a name="TOC-The-Recommends-field"></a>The 'Recommends' field</h4>
<p>This contains a comma-separated list of packages which are usually
installed alongside this one but are not strictly essential:</p>
<pre>recommends-list = [ dependency, { [ws], ',', [ws], dependency } ];
</pre>
<p>For example:</p>
<ul>
<li>A documentation package likely to be needed by most users should
be recommended.</li>
<li>A documentation package which consists mostly or entirely of HTML
may recommend WWW-Browser.</li>
</ul>
<h4><a name="TOC-The-Suggests-field"></a>The 'Suggests' field</h4>
<p>This contains a comma-separated list of packages which the user should
consider installing alongside this one but could very reasonably decide
not to:</p>
<pre>suggests-list = [ dependency, { [ws], ',', [ws], dependency } ];
</pre>
<p>For example:</p>
<ul>
<li>Documentation packages should be suggested if they are not important
enough to be recommended.</li>
<li>If a mail user agent is able to make use of an external spell checker,
but does not depend on it for functions other than spelling, then a
suitable spell checker should be suggested.</li>
</ul>
<h4><a name="TOC-The-Conflicts-field"></a>The 'Conflicts' field</h4>
<p>This contains a comma-separated list of packages which cannot be
installed at the same time as this one:</p>
<pre>conflicts-list = [ dependency, { [ws], ',', [ws], dependency } ];
</pre>
<p>In most cases this will be because the packages install a file in the
same place.  For example:</p>
<ul>
<li>If two modules have the same name and neither can be renamed then
they will conflict.</li>
</ul>
<p>However:</p>
<ul>
<li>The fact that two applications cannot be run at the same time does
not imply that they conflict.</li>
<li>The fact that no user is likely to want both packages installed at
the same time does not imply that they conflict.</li>
</ul>
<p>Do not declare a conflict without first investigating whether it
can be avoided.</p>
<h4><a name="TOC-The-Components-field"></a>The 'Components' field</h4>
<p>This contains a comma-separated list of the components that have extra
configuration options:</p>
<pre>components-list = [ component-details, { [ws], ',', [ws], component-details } ]
</pre>
<p>The component-details consists of the the component logical file/folder name
and its options:</p>
<pre>component-details = file-name, [ws], component_options ;
component-options = '(', { [ws], component_option {[ws] ' ' component-option } ,[ws], ')'
component-option = 'Movable' , 'LookAt', 'Run', 'AddToApps';
</pre>
<p>The options are all defaults that the user may override when they
install the package.</p>
<ul>
<li>'Movable' means that this component can be installed to
a different location or moved after install.</li>
<li>'LookAt' means that this component suggests that it will
be looked at on booting. i.e. It is added to the !Boot options 'Look At' list.
At install time the user will be able to override this suggestion.
As a guideline this flag should only be set for components that can be
launched by double clicking on a file type or command line utilities.</li>
<li>'Run' means that this component will be run when the
RISC OS desktop is next started</li>
<li>'AddToApps' means that this component will be added
to the 'Apps' folder that is available from the RISC OS
Iconbar</li>
</ul>
<p>For example:</p>
<pre>Components: Apps.Development.!PackIt (Moveable,LookAt)
</pre>
<p>Packages with the Standards-Version set to 0.4.0 or later will assume
that if the Components field is NOT set there are no movable components
in the Package</p>
<p>It is expected the use of the Components field replaces the SysVars
and Sprites package control folders. If the package requires system variables and sprites to be loaded you would normally specify the LookAt
option so the application is booted when the desktop is started. It is suggested
that if the component isn't providing command line utilities
or support for a file type that SysVars and Sprites are just
removed and the LookAt option is not set.</p>
<h3><a name="TOC-The-Copyright-file"></a>The Copyright file</h3>
<p>Every package shall contain a text file named <code>Copyright</code>
in its <code>RiscPkg</code> directory.  No specific structure is required,
but it must contain the following information:</p>
<ul>
<li>the name of the upstream author(s);</li>
<li>the names of current and past package maintainers;</li>
<li>the provenance of the upstream sources; and</li>
<li>a verbatim copy of the copyright notice and distribution licence</li>
</ul>
<p>(Note that without a distribution licence it is highly unlikely that
a package can be distributed.)</p>
<h3><a name="TOC-The-Triggers-directory"></a>The Triggers directory</h3>
<p>A package can optionally contain runnable files in the <code>Triggers</code>
directory in its <code>RiscPkg</code> directory that will be run as part of the
commit (installation, removal or upgrade) of a package.</p>
<p>
Triggers should be used only when necessary and should be avoided in most cases as:
<ul>
<li>They increase the complexity of a package.</li>
<li>Increase the time required to commit a package.</li>
<li>Will not be run if the user manually installs a program from outside the
 package manager.</li>
</ul>
It is always better to do any special actions when an application is first run
rather than relying on triggers.</p>
<p>
The following names are used by code in the Triggers directory.
<table border="1">
<tbody><tr>
<th>File</th>
<th>Description</th>
</tr>
<tr>
<td>PreInstall</td><td>Run before a package is installed.</td>
</tr>
<tr>
<td>PreRemove</td><td>Run before a package is removed.</td>
</tr>
<tr>
<td>PostInstall</td><td>Run After a package has been installed.</td>
</tr>
<tr>
<td>PostRemove</td><td>Run After a package has been removed.</td>
</tr>
</tbody></table>
<i>It is only necessary to add the files for the triggers required.</i>
</p>
<p>
Other code can be added to the Triggers directory and this will be available
when the triggers are run. This allows for triggers to use shared code etc.</p>
<p>
The code can be any executable code and is run in a background TaskWindow with
a WimpSlot of 256K.
If logging is turned on, any output from the trigger is added to the Log.
</p>
<p>
A triggers operation should not rely on any other trigger having been run
and it should allow for cases where it may be called multiple times.
</p>
<p>
Information is passed to and from a Trigger using system variables prefixed
<code>PkgTrigger$</code>.
</p>
<p>
At the minimum a trigger must set <code>PkgTrigger$ReturnCode</code> to 0
if a trigger succeeds or to 1 if it fails.
On failure <code>PkgTrigger$ReturnText</code> can be set to give the error
message, which may then be logged/reported by the package manager.
</p>
<p>
The full set of variables are:
<table border="1"><tbody>
<tr>
<th>Variable</th>
<th>Description</th>
</tr>
<tr>
<td><code>PkgTrigger$Action</code></td>
<td>The current action, see below:</td>
</tr>
<tr>
<td><code>PkgTrigger$Abort</code></td>
<td>0 or 1. If set to 1 this trigger is being run to unwind a previous trigger failure.</td>
</tr>
<tr>
<td><code>PkgTrigger$OldVersion</code></td>
<td>The version of the package being removed or "" if it's an install.</td>
</tr>
<tr>
<td><code>PkgTrigger$NewVersion</code></td>
<td>The version of the package being installed or "" if it's being removed.</td>
</tr>
<tr>
<td><code>PkgTrigger$Dir</code></td>
<td>The directory the trigger is being run from. Use this as a prefix if
 running other code in the Triggers directory.</td>
</tr>
<tr>
<td><code>PkgTrigger$ReturnCode</code></td>
<td>The return code from the trigger, should be set to 0 for success or 1 for failure.</td>
</tr>
<tr>
<td><code>PkgTrigger$ReturnText</code></td>
<td>Set to a brief error message it the trigger fails.</td>
</tr>
<tr>
<td><code>PkgTrigger$Path&lt;n&gt;</code></td>
<td>&lt;n&gt; is a number from 1 upwards. These variables contain the path to
 the components in the package.</td>
</tr>
<tr>
<td><code>PkgTrigger$S_*</code></td><td>
Variables prefixed <code>PkgTrigger$S_</code> are shared variables that exist
for the lifetime of the current package commit and are deleted after the commit
has finished. They are used so state can be shared between triggers. It is
advisable to use the package name in the variable name to avoid clashes with
triggers from other packages.</td>
</tr>
</tbody></table>
</p>
<p>
The PkgTrigger$Action can be:
<table border="1"><tbody>
<tr>
<th>Action</th><th>Description</th>
</tr>
<tr>
<td><code>install</code></td><td>The package is being installed.</td>
</tr>
<tr>
<td><code>remove</code></td><td>The package is being removed.</td>
</tr>
<tr>
<td><code>upgrade</code></td><td>The package is being upgraded.</td>
</tr>
<tr>
<td><code>abort-remove</code></td><td>The trigger is being run as a remove failed.</td>
</tr>
<tr>
<td><code>abort-install</code></td><td>The trigger is being run as an install failed.</td>
</tr>
<tr>
<td><code>abort-upgrade</code></td><td>The trigger is being run as an upgrade failed.</td>
</tr>
</tbody></table>
</p>
<p>
The triggers are called in the following order for an install.
<ul>
<li>PreInstall</li>
<li>PostInstall</li>
</ul>
If PreInstall fails the package is not installed.
If PostInstall fails the package is still installed, but a warning is shown.
</p>
<p>
The triggers are called in the following order for a remove.
<ul>
<li>PreRemove</li>
<li>PostRemove</li>
</ul>
If PreRemove fails the package is not removed.
If PostRemove fails the package is still removed, but a warning is shown.
</p>
<p>
The triggers are called in the following order for an upgrade
<ul>
<li>old-PreRemove</li>
<li>new-PreInstall</li>
<li>old-PostRemove</li>
<li>new-PostInstall</li>
</ul>
The "old-" prefix indicates the trigger from the old package is run.
The "new-" prefix indicates the trigger from the new package is run.
</p>
If old-PreRemove fails
<ul>
<li>The upgrade does not take place</li>
<li>old-PostInstall is called (any failure is ignored)</li>
</ul>
</p>
<p>
If new-PreInstall fails
<ul>
<li>The upgrade does not take place</li>
<li>new-PostRemove is called (any failure is ignored)</li>
<li>old-PostInstall is called (any failure is ignored)</li>
</ul>
<p>
If old-PostRemove fails and is not part of an abort the upgrade completes, but a warning is shown.
</p>
<p>
If new-PostInstall fails and is not part of an abort the upgrade completes, but a warning is shown.
</p>

<h3><a name="TOC-The-Rules-file"></a>The Rules file</h3>
<h4><a name="TOC-Introduction2"></a>Introduction</h4>
<p>Every source package should contain a makefile called
<code>RiscPkg.Rules</code> containing instructions for building the
corresponding binary package(s).  These should be placed in the
<code>RiscPkg</code> directory and have names of the form:</p>
<pre>binary-leafname = binary-package-name, '_', version-number;
</pre>
<p>for example <code>LibPkg-Dev_0/2/1</code> (on a RISC OS machine)
or <code>LibPkg-Dev_0.2.1</code> (on a POSIX machine).</p><p>
</p><p>All binary packages are to be built when the makefile is invoked with
no target or with the target 'all'.  (Typically this would
be achieved by making 'all' the default target.)</p><p>
</p><p>The <code>Rules</code> file should assume that the current working
directory is at the root of an unpacked copy of the source package.
Typically the command that invokes it will be of the form:</p>
<pre>make -C &lt;source-package-root&gt; -f RiscPkg/Rules
</pre>
<p>It may also assume that it has ownership of all files and directories
at or below this root, and that any file permissions are no more restrictive
than the following:</p>
<table border="1">
<tbody><tr>
<th>Filesystem</th>
<th>File permissions</th>
<th>Directory permission</th>
</tr>
<tr><td>AFS</td>
<td>rlidwk</td>
<td>rlidwk</td>
</tr><tr>
<td>RISC OS</td>
<td>WR/</td>
<td>WR/</td>
</tr>
<tr>
<td>POSIX</td>
<td>044</td>
<td>055</td>
</tr>
</tbody></table>
<p>It is recommended that the Rules file seek to avoid altering any file
that is part of the supplied source package, in order to avoid creating
differences which might be inadvertently checked back in to the revision
control system; however it is recognised that this may not always be
practicable when packaging software that was created by a third party.</p>
<p>The Rules file must not attempt to read or modify any file or directory
outside the root of the supplied source package, unless it is either
(a) a defined part of the build environment or (b) a file made available
by a build-time dependency, in which case it may read from the file but
not alter it.</p>
<h3><a name="TOC-The-CrossPaths-file"></a>The CrossPaths file</h3>
<p>The package file format is primarily designed for installing software
on RISC OS machines, however in some cases there is also a need to
make it available to a cross-compiler running on a POSIX-based operating
system.  This is done by including a CrossPaths file in the RiscPkg
directory of the relevant binary package.</p>
<p>Each line within the file consists of two pathnames separated by
whitespace.  The first is a logical pathname which identifies a file
or set of files in the binary package which are to be copied.  The
second pathname specifies where those files are to be placed.  It too
is a logical pathname, but using a different set of conventions that
are better suited to the way files are organised on a POSIX system.
The following paths are defined:</p>
<table border="1">
<tbody><tr>
<td><code>include</code></td>
<td>A location that the cross-compiler will search for header files.</td>
</tr>
<tr>
<td><code>lib</code></td>
<td>A location that the cross-compiler will search for libraries.</td>
</tr>
</tbody></table>
<p>Wildcard variables may be used to copy many files with a single rule.
These consist of a percentage sign followed by a decimal digit, and
match any sequence of zero or more characters within a single pathname
component (but not sequences which span multiple components).  The
variable should appear in both the source or the destination path.
Wildcards can be used to translate between RISC OS and POSIX-style
naming conventions, for example:</p>
<pre>Apps/Library/!LibPkg/libpkg/h/%1 include/%1.h
Apps/Library/!LibPkg/a/%1 lib/%1.a
</pre>
<p>You should include a CrossPaths file within any binary package that
contains files which could potentially be needed by the cross-compiler,
whether or not that package is itself capable of being built using the
cross-compiler.</p>
<h3><a name="TOC-Versions"></a>Versions</h3>
<h4><a name="TOC-Structure"></a>Structure</h4>
<p>Versions have three components:</p>
<ul>
<li>the epoch;</li>
<li>the upstream version;</li>
<li>the package version.</li>
</ul>
<pre>version = [epoch, ':'], upstream-version, ['-', package-version];

epoch = {digit};

upstream-version = {letter | digit | '+' | '-' | '.' | ':' | '~'};

package-version = {letter | digit | '+' | '.' | ':' | '~'};

</pre>
<p>Only the upstream version is required.  This should match the version
of the upstream project if there is one.  (Upstream is the source from
which the software was obtained for packaging.)  For example, if you are
packaging the version of Nettle released as '0.2040r' by the
Nettle Developers then the upstream version would be
'0.2040r'.</p>
<p>If there is more than one level of upstream development, you should
typically choose the furthest upstream version consistent with the name of
the package.  For example, if you are packaging version 2.95.4 release 3
of the RISC OS GCCSDK and the package is named GCC, the upstream
version would be 2.95.4 and the release number would become part of the
package version.  However, if the package has instead been named GCCSDK
then the upstream version would be 2.95.4r3.</p>
<p>Changes can be made to avoid illegal characters or ensure that the sort
order is correct.  Some common cases are described below.</p>
<p>The package version allowes for the possibility that a given upstream
version will be packaged (or ported) more than once.  Typically it should
start at zero each time the upstream version changes and increment each
time there is no change.  A more complex scheme can be used if it is
considered useful.</p>
<p>The epoch allows for major changes (or mistakes) in the numbering scheme
which would otherwise disrupt the sort order.  It should notionally begin
at zero, then increment each time the upstream version needs to move
backwards.  While the epoch is equal to zero it should be omitted entirely.
</p>
<p>Changes to the epoch should be rare and unplanned events.  If the
upstream version scheme makes epoch changes inevitable then it must
be modified to prevent this happening.</p>
<h4><a name="TOC-The-sort-order"></a>The sort order</h4>
<p>The epoch is the most significant component, followed by the upstream
version then the package version.</p>
<p>Components are compared by dividing them into an alternating sequence
of numeric and non-numeric sections.  The first section is defined to
be non-numeric (so will be empty if the component begins with a digit).</p>
<p>Non-numeric sections are compared lexicographically using ASCII
values, modified so that letters sort earlier than non-letters, and so
that the tilde character sorts earlier than anything else (including the
empty string).  Numeric sections are compared numerically.  If a numeric
section is empty then it is taken to be equal to zero.</p>
<p>Sections are compared from left to right until a difference is found
or until both components are exhausted.</p>
<blockquote>
<p>(This sort order is intended to be the same as that specified in
version 3.8.0 of the Debian Policy Manual.  If any difference is found
between dpkg, RiscPkg or the two policy manuals it should be reported as
a bug.)</p>
</blockquote>
<h4><a name="TOC-Ensuring-the-sort-order"></a>Ensuring the sort order</h4>
<p>If the upstream version incorporates a date then the year must
precede the month and the month must precede the day.  Formats with a
suitable sort order include '1999.9.27',
'1999.09.27' and '19990927'.</p>
<p>If the upstream version contains a suffix such as '-pre2',
'-test5' or '-rc12' then this may be moved out
of the upstream version and appended to the package version.  It will
then have no effect on the sort order (because the remainder of the
package version will always take precedence) while remaining visible
to the end user.</p>
<blockquote>
<p>If the suffix remains attached to the upstream version then it is
not possible to remove the suffix when a final release is available
without disrupting the sort order.  This can lead the user to believe
that the package is less mature than is actually the case.</p>
</blockquote>
<h3><a name="TOC-File-attributes"></a>File attributes</h3>
<p>Each files in a binary package must have a RISC OS extra
information field.</p>
<blockquote>
<p>This specifies the file type, timestamp and file attributes.  It has
a zip file tag of 0x4341.  Most zip file compressors written for or
ported to RISC OS provide this field automatically.  Those intended
for other operating systems more likely do not.</p>
</blockquote>
<p>File attributes should be set to <code>LR/r</code> for static files
and either <code>WR/wr</code> or (preferably) <code>WR/r</code> for
variable files.  Packages should not assume that the attributes are set
to these values when the files are installed.</p>
<blockquote>
<p>The purpose of this rule is not to force any particular attribute
policy on the installed files, but rather to ensure that the package
manager is aware of what permissions are needed for the system to
function correctly.  If the user wants all files to be writable then
it is a straightforward matter for the package manager to force the
attributes to <code>WR/wr</code> during installation, whereas it would
not be able to do the opposite.</p>
<p>It has not been decided how the package manager will distinguish
between files which should disappear when a package is removed and files
which should remain until it is purged, however it is possible that file
attributes will be used for this purpose.</p>
</blockquote>
<h2><a name="TOC-System-variables"></a>System variables</h2>
<p>The use of System variables has been deprecated with Standards-Version
0.4.0 and above. It is recommended that the LookAt option in the Control
files Components field is used to Boot an application to set any
variables required.</p>
<h3><a name="TOC-Ownership-and-definition"></a>Ownership and definition</h3>
<p>A package may claim ownership of a system variable by including a
file named after the variable in its <code>SysVars</code> subdirectory.
An escape mechanism is provided to allow for characters which have
special meanings in RISC OS pathnames.  To use it, replace the
character with an equals-sign followed by a two-digit hexadecimal
character code.</p>
The following characters (and no others) must be escaped:
'.' (full-stop),
':' (colon),
'$' (dollar-sign),
'&amp;' (ampersand),
'@' (at-sign),
'^' (caret),
'%' (percent-sign),
'\' (backslash) and
'=' (equals-sign).
<p>The following filetypes are allowed:</p>
<table border="1">
<tbody><tr>
<th>Filetype</th>
<th>Content</th>
</tr>
<tr>
<td>Text</td>
<td>A parsed string with which to initialise the system variable.</td>
</tr>
<tr>
<td>Data</td>
<td>An unparsed string with which to initialise the system variable.</td>
</tr>
</tbody></table>
<p>All other filetypes are reserved for future use.  If a string is parsed
then this is done by <code>OS_GSTrans</code> or an equivalent, with the
addition of support for logical pathname references (as described below).</p>
<p>Note that this mechanism does <i>not</i> replace the need to set system variables in <code>!Boot</code> and <code>!Run</code> files.</p>
<h3><a name="TOC-Use-of-Run-Path"></a>Use of <code>Run$Path</code></h3>
<p>Packages should not change <code>Run$Path</code> simply because
they provide one or more command line programs.  Aliases of the form
<code>Alias$command</code> should be used instead.</p>
<blockquote>
<p>The <code>Run$Path</code> would soon become very long if every
command line program were to extend it.  This would make the system less
efficient and could eventually break it.</p>
</blockquote>
<h2><a name="TOC-Desktop-applications"></a>Desktop applications</h2>
<h3><a name="TOC-The-Boot-file"></a>The <code>!Boot</code> file</h3>
<p>The <code>!Boot</code> file must be idempotent (meaning that the result
after executing it twice is the same as the result after executing it once.)
</p>
<p>The actions performed by a <code>!Boot</code> file should be limited
to the following:</p>
<ul>
<li>Setting system variables;</li>
<li>Loading sprites into the wimp sprite pool.</li>
</ul>
<p>System variables with previously set values should not be altered.</p>
<blockquote>
<p>Ideally the <code>!Boot</code> file would not replace existing sprites
either, but it is not obvious how this could be easily achieved.</p>
</blockquote>
<h3><a name="TOC-The-Run-file"></a>The <code>!Run</code> file</h3>
<p>If the application needs a system variable to be set to a particular
value then the <code>!Run</code> file should forcibly set that
variable to the appropriate value.</p>
<blockquote>
<p>For example, most applications use a variable of the form
<code>App$Dir</code> to access support files within their application
directories.  Ideally applications should not clash &mdash; but if they
do then the correct behavior is to use the value appropriate to the
application that is currently running.  The variable is not intended to
be user-configurable, so this action is unlikely to override a value set
by the user.</p>
</blockquote>
<p>If the application needs a system variable to be set to a meaningful
value, but there is more than one value to which it could usefully be set,
then the <code>!Run</code> should provide a reasonable default but
should not overwrite an existing value.</p>
<blockquote>
<p>This allows configuration to be performed by setting system
variables at boot time, as opposed to editing the <code>!Run</code>
file.  The latter method is undesirable (a) because the <code>!Run</code>
may be shared between several users or machines, (b) because the
application directory cannot be made read-only, and (c) because
the system variable cannot be shared between applications.</p>
</blockquote>
<h2><a name="TOC-Sprites"></a>Sprites</h2>
<p>The use of the Sprite declarations has been deprecated with
Standards-Version 0.4.0 and above. It is recommended that the LookAt
option in the Control files Components field is used to Boot an application
to load any sprite that are required.</p>
<h3><a name="TOC-Sprite-declarations"></a>Sprite declarations</h3>
<p>The package manager has the ability to load sprites into the Wimp sprite
pool at boot time.  For this to happen the sprite must be declared.  A
package can do this by placing a file named after the sprite in its
<code>Sprites</code> directory.</p>
<p>At present the file must be a text file, in which case it contains the
pathname of the sprite file that contains the sprite.  The pathname is parsed
using <code>OS_GSTrans</code> or an equivalent, with the addition of
support for logical pathname references (as described below).</p>
<p>Only one sprite may be specified per declaration, however any number of
declarations may refer to a single sprite file.</p>
<h3><a name="TOC-Sprite-resolution"></a>Sprite resolution</h3>
<p>The sprite file identified by the pathname should be one that is
suitable for use as an argument to the <code>IconSprites</code> command.
If higher-resolution versions of this file are present then they will be
recognised automatically by the package manager, provided that the
conventional suffixes are used.  For example, if a package provides
sprite files called <code>!Sprites</code>, <code>!Sprites22</code> and
<code>!Sprites11</code> then declarations should refer to the first of
these only, but one of the others will be used if it is a better match to
the screen mode.</p>
<h2><a name="TOC-Command-line-programs"></a>Command line programs</h2>
<p>The preferred method for distributing command line programs is to
encapsulate each one within a separate application directory, then
set an alias of the form <code>Alias$command</code> to make the program
available from the command line.</p>
<blockquote>
<p>The alternative of placing all command line programs in a central
location would work acceptably for stand-alone executables, but provides
nowhere for supporting documentation and other files to be located.  Use
of an application directory was thought to be more in keeping with the
RISC OS tradition of keeping associated files together where possible.</p>
</blockquote>
<p>Where there would be no advantage in a command having its own graphical
front end, it is permissible for it to share an application directory with
other programs.</p>
<p>At its simplest, the application directory would contain
<code>!Boot</code> and <code>!Run</code> files to set system variables, a
<code>!Sprites</code> file to provide an icon, the executable itself, and
documentation within or referenced by a <code>!Help</code> file.  Other
files may be added as required.</p>
<p>Provision of files for use by the FrontEnd module is encouraged.  Provided
they are reasonably small (as is likely to be the case) they can be bundled
into the same package as the executable.  More elaborate graphical front ends
should in most cases be packaged separately.</p>
<h2><a name="TOC-Logical-Pathname-References"></a>Logical Pathname References</h2>
<p>When specifying the content of a system variable or the location of a
sprite file it may be necessary to translate a logical pathname to a physical
pathname.  This is done using an extension of the syntax implemented by
<code>OS_GSTrans</code>:</p>
<pre>logical-pathname-reference = '&lt;', package-name, '$', '@', logical-pathname, '&gt;';

</pre>
<p>For example, the logical path <code>Apps.Admin.!RiscPkg</code> within
the package <code>RiscPkg</code> would be expressed as:</p>
<pre>&lt;RiscPkg$@Apps.Admin.!RiscPkg&gt;

</pre>
<p>Only pathnames can be processed in this way.  If a path is required then
the trailing period must be placed outside the logical path reference:</p>
<pre>&lt;RiscPkg$@Apps.Admin.!RiscPkg&gt;.

</pre>
<h2><a name="TOC-Module-packages"></a>Module packages</h2>
<p>A module package is a package that just contains a single RISC OS
module that will be installed into the !System modules directory.</p>
<p>It can contain a single module in the appropriate subdirectory
of !System and optionally some documentation to be installed in the
root Manuals directory.</p>
<p>The package name should be the full name of the module (the module
title) and the version must match the version number of the module
followed by a dash and the package number (starting with 1).</p>
<p>e.g. For a module in file MyMod with a title MyModule and version
1.11, the package name should be MyModule and the version should be
1.11-1.</p>
<p>If the versioning rules are followed the packaging system will
detect if a newer existing version of the module already exists on the
machine and use that instead of the package when the module package
is installed.</p>
<h2><a name="TOC-Build-Environment"></a>Build Environment</h2>
<h3><a name="TOC-Introduction3"></a>Introduction</h3>
<p>The build environment is the set of tools, libraries and other resources
that are external but available to a source package while it is being built.
There are two parts to the build environment:</p>
<ul>
<li>resources which the source package has explicitly declared as
build-time dependencies;</li>
<li>resources which are presumed to be available by default so need not
be explicitly declared.</li>
</ul>
<p>The latter category is provided so that it is not necessary for large
numbers of source packages to declare their need for basic facilities such
as Make or GCC.  Binary packages which provide such resources are described
as 'build-essential&amp;rsqup;.</p>
<p>Two different build platforms are defined, RISC OS and POSIX, and
there are differences between them.  Ideally source packages should be
written so that they can be compiled on either, however it is recognised
that this is impractical in many cases.</p>
<h3><a name="TOC-Build-essential-packages"></a>Build-essential packages</h3>
<p>The following packages (or their equivalents) are build-essential when
using RISC&nbsp;OS as the build platform:</p>
<table border="1">
<tbody><tr>
<th>Name</th>
<th>Version</th>
<th>Description</th>
</tr>
<tr>
<td>DiffUtils</td>
<td>2.7</td>
<td>A set of tools for comparing files</td>
</tr>
<tr>
<td>DRLink</td>
<td>0.44</td>
<td>AOF linker</td>
</tr>
<tr>
<td>FixDeps</td>
<td>1.0.2</td>
<td>A filter for processing makefile dependencies</td>
</tr>
<tr>
<td>FileUtils</td>
<td>4.1</td>
<td>GNU file management utilities</td>
</tr>
<tr>
<td>G++</td>
<td>3.4</td>
<td>The GNU Compiler Collection (C++ compiler)</td>
</tr>
<tr>
<td>GCC</td>
<td>3.4</td>
<td>The GNU Compiler Collection (C compiler)</td>
</tr>
<tr>
<td>Ld-GCCSDK</td>
<td>0.44</td>
<td>A GNU-compatible front-end for Link or DRLink</td>
</tr>
<tr>
<td>LibFile</td>
<td>1.01</td>
<td>ALF creation and maintenance tool</td>
</tr>
<tr>
<td>Make</td>
<td>3.80</td>
<td>The GNU Project implementation of Make</td>
</tr>
<tr>
<td>Patch</td>
<td>2.5.4</td>
<td>A tool for applying diff files</td>
</tr>
<tr>
<td>Perl</td>
<td>5.8.8</td>
<td>The Perl programming language interpreter</td>
</tr>
<tr>
<td>RiscPkg-GenControl</td>
<td>0.0.0</td>
<td>Binary control file generator for RiscPkg packages</td>
</tr>
<tr>
<td>Sed</td>
<td>4.0.9</td>
<td>The GNU stream editor</td>
</tr>
<tr>
<td>UnixLib-Dev</td>
<td>4.6</td>
<td>A C run-time library for RISC OS</td>
</tr>
<tr>
<td>Unzip</td>
<td>5.52</td>
<td>A decompressor/dearchiver for zipfiles</td>
</tr>
<tr>
<td>Zip</td>
<td>2.3</td>
<td>A compressor/archiver for creating and modifying zipfiles</td>
</tr>
<tr>
<td>UUDecode</td>
<td>4.2.1</td>
<td>UU and base-64 file decoder</td>
</tr>
<tr>
<td>UUEncode</td>
<td>4.2.1</td>
<td>UU and base-64 file encoder</td>
</tr>
</tbody></table>
<p>When using a POSIX-based system as the build platform, equivalent
functionality should be provided, typically by installing GCCSDK,
with the exception of FixDeps.  (The functionality of FixDeps can be
achieved using Sed on a POSIX-based system.)</p>
<p>The versions specified are the minimum allowed.  Higher versions may
be used provided that they are fully backwards-compatible.  The method
of installation for this software is unspecified: it is not necessary
to use RiscPkg (although it would be sensible to do so where the build
platform is RISC OS and the necessary packages are available.)</p>
<p>Source packages should not attempt to test whether they are being
built on RISC OS or POSIX; instead, they should determine whether
the build platform provides the specific feature that is required.</p>
<p>It is not necessary to write fully portable makefiles, as you can
assume that Make will be compatible with the GNU Project version.</p>
<h3><a name="TOC-Environment-Variables"></a>Environment Variables</h3>
<p>The following environment variables may/shall be set by the autobuilder
before invoking the Rules file of a source package:</p>
<table border="1">
<tbody><tr>
<td>RISCPKG_BUILD_GNU_CPU_FAMILY</td>
<td>Required</td>
<td>The name used by the GNU toolchain to identify the target CPU family
(currently always 'arm').</td>
</tr>
<tr>
<td>RISCPKG_BUILD_GNU_CPU_TYPE</td>
<td>Required</td>
<td>The name used by the GNU toolchain to identify the specific target CPU
(for example 'strongarm' or 'xscale'), or undefined
to indicate that the compiler defaults should be used.</td>
</tr>
<tr>
<td>CPPFLAGS</td>
<td>Optional</td>
<td>Flags to be passed to the C preprocessor.</td>
</tr>
<tr>
<td>CFLAGS</td>
<td>Optional</td>
<td>Flags to be passed to the C compiler.  These will include instances of
'mtune' and 'mcpu' if appropriate.</td>
</tr>
<tr>
<td>CXXFLAGS</td>
<td>Optional</td>
<td>Flags to be passed to the C++ compiler.  These will include instances of
'mtune' and 'mcpu' if appropriate.</td>
</tr>
<tr>
<td>LDFLAGS</td>
<td>Optional</td>
<td>Flags to be passed to the linker.</td>
</tr>
</tbody></table>
<h3><a name="TOC-Bugs"></a>Bugs</h3>
<p>If you encounter a bug in a package on which you depend, either at
run-time or build-time, then you should either wait for the bug to be fixed
or put in place a workaround that allows the package to be built with or
without a fix.  Do not install a workaround which is likely to break when
the bug is corrected, as this will unnecessarily complicate the process of
fixing it.</p>
<h2><a name="TOC-Acknowledgements"></a>Acknowledgements</h2>
<p>Significant aspects of this policy manual are based on the
Debian Policy Manual, written by Ian Jackson and Christian Schwarz.</p>
<h2><a name="TOC-Copyright"></a>Copyright</h2>
<p>This manual is part of the RISC OS Packaging Project.</p>
<p>Copyright &copy; 2004-2013 Graham Shaw.</p>
<p>Minor edits and changes for Components &copy; 2014 Alan Buckley.</p>
<p>Distribution and use are subject to the GNU General Public License,
as published by the Free Software Foundation.</p>
</body>
</html>

